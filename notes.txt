set(PKG_CONFIGS Release)
add_pkg(ZIB GIT_URL x GIT_TAG y)
set(PKG_CONFIGS Debug)
set(PKG_CLONE_DIR ./)
add_pkg(IZE GIT_URL x GIT_TAG y)
build(CMAKE_ARGS ize bize SOURCE_DIR ..)

build/cmakex-install
build/cmakex-build
build/cmakex-clone
cmakex cbdrit


add_pkg:
- clone + build + install here in the build directory, as it is (not cached)
- clone + build + install here in the build directory in a cache, return install dir or compressed archive
- clone + build + install here in another build directory in a cache, return install dir or compressed archive
- download from remote server, return install dir or compressed archive

add_pkg:

PACKAGE_SOURCE_POLICY = local_build | force_server_build | server_build | try_server_build

    switch(PACKAGE_SOURCE_POLICY)
        case force_server_build:
        case server_build:
        case try_server_build:
            server_has_it = ask_server()
            if(!server_has_it && PACKAGE_SOURCE_POLICY == server_build || PACKAGE_SOURCE_POLICY == force_server_build)
                server_has_it = build_on_server()
            if(server_has_it)
                download && return path
            else            
                CHECK(PACKAGE_SOURCE_POLICY != force_server_build)
                build_here_to_cache()
                return path
        case local_build:
            build_locally() && return path


what should happen at an add_pkg (add_dep?) command

cmakex [t][d][r][w] -B <binary-dir>
    --add-pkg "ZLIB GIT_URL https://scm.adasworks.com/r/thirdparty/src/zlib CMAKE_ARGS -DBUILD_SHARED_LIBS=0"
    config_pars (no install_prefix)
    -- native_pars

cmakex -H <build-script> -B binary_dir config_pars [configs] --target TS -- native_pars
add_pkg:
    clone

    --package
    cmakex
        -H clone_dir/SOURCE_DIR
        -B pkg_binary_dir(binary_dir, pkg_name)
        all the config pars
        all the configs or CONFIGS specified for the pkg
        install target
        test target if specified
        -- native_pars
        install_prefix = pkg_install_prefix(binary_dir, pkg_name)


deps_install_prefix = deps/o
deps_binary_dir = deps/b
deps_clone_dir = deps/c
package_registry = url or urls
